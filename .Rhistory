year(sampleTimes)==2012
sum(year(sampleTimes)==2012)
wday(sampleTimes)
sampletimes[year(sampleTimes)==2012)]
year(sampleTimes)==2012)
year(sampleTimes)==2012)
year(sampleTimes==2012)
year(sampletTimes)
year(sampleTimes)
year(sampleTimes)==2012
sampleTimes[year(sampleTimes)==2012]
wday(sampleTimes[year(sampleTimes)==2012])
wday(sampleTimes[year(sampleTimes)==2012])==1
wday(sampleTimes[year(sampleTimes)==2012])
library("lubridate", lib.loc="~/R/win-library/3.2")
library("lubridate", lib.loc="~/R/win-library/3.2")
wday(sampleTimes[year(sampleTimes)==2012])
wday(sampleTimes[year(sampleTimes)==2012],labeT)
wday(sampleTimes[year(sampleTimes)==2012],label=T)
wday(sampleTimes[year(sampleTimes)==2012],label=T)
wday(sampleTimes[year(sampleTimes)==2012],label=T)=="Mon"
sum(wday(sampleTimes[year(sampleTimes)==2012],label=T)=="Mon")
rm(list = ls())
setwd("C:\Users\Derik\Documents\R\coursera\steps")
setwd("C:/Users/Derik/Documents/R/coursera/steps")
dir()
unzip("activity.zip")
dir()
read.csv("activity.csv")
steps<-read.csv("activity.csv")
str(steps)
strptime(steps$date, format="%Y-%m-%d")
steps$date<-strptime(steps$date, format="%Y-%m-%d")
str(steps)
factor(steps$date)
list(steps$date)
aggregate(steps$steps,steps$date,fun="sum")
aggregate(steps$steps,by=steps$date,FUN="sum")
aggregate(steps,by=date,FUN="sum",data=steps)
aggregate(steps,by=list(date),FUN="sum",data=steps)
cut(step$date,"day")
aggregate(steps ~ date, data = steps)
head(steps)
aggregate(steps ~ date, data = steps, sum())
aggregate(steps ~ date, data = steps, sum)
steps<-read.csv("activity.csv")
aggregate(steps ~ date, data = steps, sum)
steps$days<-strptime(steps$date, format="%Y-%m-%d")
aggregate(steps ~ date, data=steps, sum)
totalday<-aggregate(steps ~ date, data=steps, sum)
hist(totalday$steps)
hist(totalday$steps,breaks=10)
aggregate(steps ~ date, data=steps, c(mean,median))
aggregate(steps ~ date, data=steps, FUN=c(mean,median))
aggregate(steps ~ date, data=steps, FUN=function(x) c(mean(x),median(x)))
aggregate(steps ~ date, data=steps, FUN=function(x) c(mean=mean(x),medin=median(x)))
plot(steps$days,steps$steps)
plot(steps$days,steps$steps,type="l")
head(steps)
plot(steps$interval,steps$steps,type="l")
minutes<-sort(steps$interval)
plot(minutes,steps$steps,type="l")
steps$interval
steps.min<-aggregate(steps ~ interval, data = steps, FUN = "mean")
head (steps.min)
steps.min<-aggregate(steps ~ interval, data = steps, FUN = "mean")
plot(steps~interval, data=steps.min,type="l")
plot(steps~interval, data=steps.min,type="l",ylab="mean num. steps")
max(steps.min$steps)
which(steps.min==max(steps.min$steps))
pos<-which(steps.min==max(steps.min$steps))
steps.min[pos,1]
pos<-which(steps.min==max(steps.min$steps,na.rm=T))
steps.min[pos,1]
pos
steps.min[pos,]
pos<-which(steps.min$steps==max(steps.min$steps,na.rm=T))
pos
steps.min[pos,1]
steps.min[pos,]
max.int<-steps.min[pos,1]
max.steps<-steps.min[pos,2]
pos<-which(steps.min$steps==max(steps.min$steps))
max.int<-steps.min[pos,1]
max.steps<-steps.min[pos,2]
is.na(steps)
table(is.na(steps))
sum(is.na(steps))
colSums(is.na(steps))
plot(is.na(steps$steps))
head(steps$steps)
stretches<-0
n<-1
for (i in 1:length(steps$steps))
{
if is.na(steps$steps[i]) & is.na(steps$steps[i+1])
{
stretches[n]<-stretches[n]+1
}
elseif is.na(steps$steps[i]) and ~is.na(steps$steps[i+1])
{
stretches[n]<-stretches[n]+1
n<-n+1
}
}
stretches<-0
n<-1
for (i in 1:length(steps$steps))
{
if is.na(steps$steps[i]) & is.na(steps$steps[i+1])
stretches[n]<-stretches[n]+1
elseif is.na(steps$steps[i]) and ~is.na(steps$steps[i+1])
stretches[n]<-stretches[n]+1
n<-n+1
}
stretches<-0
n<-1
for (i in 1:length(steps$steps)) {
if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
stretches[n]<-stretches[n]+1
elseif (is.na(steps$steps[i]) and ~is.na(steps$steps[i+1]))
stretches[n]<-stretches[n]+1
n<-n+1
}
stretches<-0
n<-1
for (i in 1:length(steps$steps)) {
if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
stretches[n]<-stretches[n]+1
if (is.na(steps$steps[i]) & ~is.na(steps$steps[i+1]))
stretches[n]<-stretches[n]+1
n<-n+1
}
stretches<-0
n<-1
for (i in 1:length(steps$steps)-1) {
if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
stretches[n]<-stretches[n]+1
if (is.na(steps$steps[i]) & ~is.na(steps$steps[i+1]))
stretches[n]<-stretches[n]+1
n<-n+1
}
if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
stretches[n]<-stretches[n]+1
is.na(steps$steps[i]
)
is.na(steps$steps[i])
is.na(steps$steps[1])
is.na(steps$steps[1+1])
(is.na(steps$steps[1]) & is.na(steps$steps[1+1]))
stretches<-0
n<-1
for (i in 1:length(steps$steps)-1)
{
if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
stretches[n]<-stretches[n]+1
if (is.na(steps$steps[i]) & ~is.na(steps$steps[i+1]))
stretches[n]<-stretches[n]+1
n<-n+1
}
if (is.na(steps$steps[1]) & is.na(steps$steps[1+1]))
stretches[n]<-stretches[n]+1
stretches<-0
n<-1
for (i in 1:length(steps$steps)-1)
{
print(i)
#   if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
#     stretches[n]<-stretches[n]+1
#   if (is.na(steps$steps[i]) & ~is.na(steps$steps[i+1]))
#     stretches[n]<-stretches[n]+1
#     n<-n+1
}
stretches<-0
n<-1
for (i in 1:length(steps$steps)-1)
{
if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
{
stretches[n]<-stretches[n]+1
}
#   if (is.na(steps$steps[i]) & ~is.na(steps$steps[i+1]))
#     stretches[n]<-stretches[n]+1
#     n<-n+1
}
stretches<-0
n<-1
for (i in 1:length(steps$steps)-1)
is.na(steps$steps[i])
#   {
#    if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
#    {
#      stretches[n]<-stretches[n]+1
#    }
#   if (is.na(steps$steps[i]) & ~is.na(steps$steps[i+1]))
#     stretches[n]<-stretches[n]+1
#     n<-n+1
}
stretches<-0
n<-1
for (i in 1:length(steps$steps)-1)
is.na(steps$steps[i])
stretches<-0
n<-1
for (i in 1:length(steps$steps)-1)
(steps$steps[i])
length(steps$steps)-1
for (i in 1:length(steps$steps)-1)
(steps$steps[i])
for (i in 1:length(steps$steps)-1)
steps$steps[i]
for (i in 1:length(steps$steps)-1)
print(steps$steps[i])
stretches<-0
n<-1
for (i in 1:length(steps$steps)-1)
#   {
#    if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
#    {
#      stretches[n]<-stretches[n]+1
#    }
#   if (is.na(steps$steps[i]) & ~is.na(steps$steps[i+1]))
#     stretches[n]<-stretches[n]+1
#     n<-n+1
}
for (i in 1:length(steps$steps)-1)
is.na(steps$steps[i])
for (i in 1:length(steps$steps)-1)
print(is.na(steps$steps[i]))
for (i in 1:length(steps$steps)-1)
print((is.na(steps$steps[i]) & is.na(steps$steps[i+1])))
stretches[n]
stretches[n]<-stretches[n]+1
stretches<-0
n<-1
for (i in 1:length(steps$steps)-1)
{
if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
{
stretches[n]<-stretches[n]+1
}
if (is.na(steps$steps[i]) & ~is.na(steps$steps[i+1]))
stretches[n]<-stretches[n]+1
n<-n+1
}
stretches<-0
n<-1
for (i in 1:length(steps$steps)-1)
{
if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
{ print(i)
# stretches[n]<-stretches[n]+1
}
#   if (is.na(steps$steps[i]) & ~is.na(steps$steps[i+1]))
#     stretches[n]<-stretches[n]+1
#     n<-n+1
}
stretches<-0
n<-1
for (i in 1:length(steps$steps)-1)
{print(i)
if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
{ print(i)
# stretches[n]<-stretches[n]+1
}
#   if (is.na(steps$steps[i]) & ~is.na(steps$steps[i+1]))
#     stretches[n]<-stretches[n]+1
#     n<-n+1
}
1:length(steps$steps)-1
length(steps$steps)-1
stretches<-0
n<-1
for (i in 1:(length(steps$steps)-1))
{print(i)
if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
{ print(i)
# stretches[n]<-stretches[n]+1
}
#   if (is.na(steps$steps[i]) & ~is.na(steps$steps[i+1]))
#     stretches[n]<-stretches[n]+1
#     n<-n+1
}
stretches<-0
n<-1
for (i in 1:(length(steps$steps)-1))
{
if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
{ print(i)
# stretches[n]<-stretches[n]+1
}
#   if (is.na(steps$steps[i]) & ~is.na(steps$steps[i+1]))
#     stretches[n]<-stretches[n]+1
#     n<-n+1
}
stretches<-0
n<-1
for (i in 1:(length(steps$steps)-1))
{
if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
{
stretches[n]<-stretches[n]+1
}
#   if (is.na(steps$steps[i]) & ~is.na(steps$steps[i+1]))
#     stretches[n]<-stretches[n]+1
#     n<-n+1
}
stretches<-0
n<-1
for (i in 1:(length(steps$steps)-1))
{
if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
{
stretches[n]<-stretches[n]+1
}
if (is.na(steps$steps[i]) & ~is.na(steps$steps[i+1]))
stretches[n]<-stretches[n]+1
n<-n+1
}
is.na(steps$steps[1])
~is.na(steps$steps[1])
stretches<-0
n<-1
for (i in 1:(length(steps$steps)-1))
{
if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
{
stretches[n]<-stretches[n]+1
}
if (is.na(steps$steps[i]) & !is.na(steps$steps[i+1]))
stretches[n]<-stretches[n]+1
n<-n+1
}
!is.na(steps$steps[1])
steps$steps[1:100]
steps$steps[100:200]
steps$steps[200:300]
steps$steps[270:300]
steps$steps[280:300]
steps$steps[250:300]
steps$steps[285:300]
steps$steps[288:300]
steps$steps[288]
steps$steps[289]
(is.na(steps$steps[288]) & !is.na(steps$steps[288+1]))
(is.na(steps$steps[289]) & !is.na(steps$steps[289+1]))
retches<-0
n<-1
for (i in 1:(length(steps$steps)-1))
{
if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
{
stretches[n]<-stretches[n]+1
}
if (is.na(steps$steps[i]) & !is.na(steps$steps[i+1]))
{
stretches[n]<-stretches[n]+1
n<-n+1
}
}
stretches<-0
n<-1
for (i in 1:(length(steps$steps)-1))
{
if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
{
stretches[n]<-stretches[n]+1
}
if (is.na(steps$steps[i]) & !is.na(steps$steps[i+1]))
{
stretches[n]<-stretches[n]+1
n<-n+1
}
}
rm(retches)
stretches
rep(0,7)
stretches<-rep(0,7)
n<-1
for (i in 1:(length(steps$steps)-1))
{
if (is.na(steps$steps[i]) & is.na(steps$steps[i+1]))
{
stretches[n]<-stretches[n]+1
}
if (is.na(steps$steps[i]) & !is.na(steps$steps[i+1]))
{
stretches[n]<-stretches[n]+1
n<-n+1
}
}
stretches
View(steps)
View(steps)
steps$interval[2]
steps$interval[1]
head(steps.min)
which(steps.min$interval==5, arr.ind = T)
which(steps.min$interval==0, arr.ind = T)
for (i in 1:length(steps$steps))
{
if is.na(steps$steps[i])
{
#i is the index. find the interval label
target<-steps$interval[i]
#find the row number in the minutes mean table
min.row<-which(steps.min$interval==target,arr.ind = T)
#copy it to the original variable with missing `steps`
steps$steps[i]<-steps.min[min.row,2]
}
}
for (i in 1:length(steps$steps))
{
if (is.na(steps$steps[i]))
{
#i is the index. find the interval label
target<-steps$interval[i]
#find the row number in the minutes mean table
min.row<-which(steps.min$interval==target,arr.ind = T)
#copy it to the original variable with missing `steps`
steps$steps[i]<-steps.min[min.row,2]
}
}
steps$steps[1]
steps$steps[2]
sum(is.na(steps$steps))
steps.imputed<-steps
for (i in 1:length(steps.imputed$steps))
{
if (is.na(steps.imputed$steps[i]))
{
#i is the index. find the interval label
target<-steps.imputed$interval[i]
#find the row number in the minutes mean table
min.row<-which(steps.min$interval==target,arr.ind = T)
#copy it to the original variable with missing `steps`
steps.imputed$steps[i]<-steps.min[min.row,2]
}
}
head(steps)
steps<-read.csv("activity.csv")
steps$days<-strptime(steps$date, format="%Y-%m-%d")
head(steps)
head(steps.imputed)
avg.steps.imp<-aggregate(steps ~ date, data=steps.imputed, FUN=mean)
avg.steps.imp
hist(avg.steps.imp$steps,breaks=10)
avg.steps.imp<-aggregate(steps ~ date, data=steps.imputed, FUN=sum)
hist(avg.steps.imp$steps,breaks=10)
par(mfrow=c(1,2))
hist(totalday$steps,breaks=10)
hist(avg.steps.imp$steps,breaks=10)
par(mfrow=c(1,2))
hist(totalday$steps,breaks=10, main="no imputed")
hist(avg.steps.imp$steps,breaks=10, main="imputed")
aggregate(steps ~ date, data=steps.imputed, FUN=function(x) c(mean=mean(x),median=median(x)))
weekdays(steps.imputed$days[1])
is.weekdays(steps.imputed$days[1])
is.weekday(steps.imputed$days[1])
install.packages("timeDate")
library(timeDate)
isWeekday(steps.imputed$days[1])
isWeekday(steps.imputed$days[1])
isWeekday(steps.imputed$days[1])[1]
isWeekday(steps.imputed$days[1:10])
wday<-isWeekday(steps.imputed$days[1:10])
dim(wday)
dims(wday)
dim(wday)
wday
length(wday)
dim(steps.min)
dim(target)
dim(wday)
wday<-isWeekday(steps.imputed$days)
wday<-factor(wday)
library(lattice)
step.min.imp<-aggregate(steps~interval, data=steps.imputed, FUM=mean)
step.min.imp<-aggregate(steps~interval, data=steps.imputed, FUN=mean)
head(step.min.imp)
steps.imputed$wday<-wday
head(steps.imputed)
wday
wday<-factor(wday,levels=c("Weekdays","Weekends"))
wday
wday<-isWeekday(steps.imputed$days)
wday
wday<-isWeekday(steps.imputed$days)
wday
steps.imputed$days
isWeekday(steps.imputed$days)
wday<-isWeekday(steps.imputed$days)
wday<-factor(wday,levels=c("TRUE","FALSE"),labels=c("Weekdays","Weekends"))
wday
steps.imputed$wday<-wday
xyplot(steps~interval)
xyplot(steps~interval,data=steps.imputed)
xyplot(steps~interval|wday,data=steps.imputed)
xyplot(steps~interval|wday,data=steps.imputed,horizontal=F
xyplot(steps~interval|wday,data=steps.imputed,horizontal=F)
xyplot(steps~interval|wday,data=steps.imputed,layout=c(2,1))
xyplot(steps~interval|wday,data=steps.imputed,layout=c(1,2))
xyplot(steps~interval|wday,data=steps.imputed,layout=c(1,2),type="l")
steps.imputed[order(interval)]
steps.imputed[order(steps.imputed$interval)]
names(steps.imputed)
order(steps.imputed$interval)
steps.imputed[order(steps.imputed$interval),]
steps.imputed.order<-steps.imputed[order(steps.imputed$interval),]
xyplot(steps~interval|wday,data=steps.imputed,layout=c(1,2),type="l")
xyplot(steps~interval|wday,data=steps.imputed.order,layout=c(1,2),type="l")
xyplot(steps~interval|wday,data=steps.imputed.order,layout=c(1,2),type="l")
